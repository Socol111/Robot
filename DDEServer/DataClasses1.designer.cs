#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DDEServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\CANDLEBASE\\DATABASE1.MDF")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::DDEServer.Properties.Settings.Default.C__CANDLEBASE_DATABASE1_MDFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table> Table
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Tiker;
		
		private string _Time;
		
		private System.Nullable<float> _High;
		
		private System.Nullable<float> _Low;
		
		private System.Nullable<float> _Open;
		
		private System.Nullable<float> _Close;
		
		private string _BPU;
		
		private string _BSU;
		
		private string _Trade;
		
		private float _Capital;
		
		private System.Nullable<long> _DateTime;
		
		private string _TradeComment;
		
		private string _MailSent;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnTikerChanging(string value);
    partial void OnTikerChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnHighChanging(System.Nullable<float> value);
    partial void OnHighChanged();
    partial void OnLowChanging(System.Nullable<float> value);
    partial void OnLowChanged();
    partial void OnOpenChanging(System.Nullable<float> value);
    partial void OnOpenChanged();
    partial void OnCloseChanging(System.Nullable<float> value);
    partial void OnCloseChanged();
    partial void OnBPUChanging(string value);
    partial void OnBPUChanged();
    partial void OnBSUChanging(string value);
    partial void OnBSUChanged();
    partial void OnTradeChanging(string value);
    partial void OnTradeChanged();
    partial void OnCapitalChanging(float value);
    partial void OnCapitalChanged();
    partial void OnDateTimeChanging(System.Nullable<long> value);
    partial void OnDateTimeChanged();
    partial void OnTradeCommentChanging(string value);
    partial void OnTradeCommentChanged();
    partial void OnMailSentChanging(string value);
    partial void OnMailSentChanged();
    #endregion
		
		public Table()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tiker", DbType="NChar(10)")]
		public string Tiker
		{
			get
			{
				return this._Tiker;
			}
			set
			{
				if ((this._Tiker != value))
				{
					this.OnTikerChanging(value);
					this.SendPropertyChanging();
					this._Tiker = value;
					this.SendPropertyChanged("Tiker");
					this.OnTikerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NChar(10)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_High", DbType="Real")]
		public System.Nullable<float> High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Low", DbType="Real")]
		public System.Nullable<float> Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Open]", Storage="_Open", DbType="Real")]
		public System.Nullable<float> Open
		{
			get
			{
				return this._Open;
			}
			set
			{
				if ((this._Open != value))
				{
					this.OnOpenChanging(value);
					this.SendPropertyChanging();
					this._Open = value;
					this.SendPropertyChanged("Open");
					this.OnOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Close]", Storage="_Close", DbType="Real")]
		public System.Nullable<float> Close
		{
			get
			{
				return this._Close;
			}
			set
			{
				if ((this._Close != value))
				{
					this.OnCloseChanging(value);
					this.SendPropertyChanging();
					this._Close = value;
					this.SendPropertyChanged("Close");
					this.OnCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BPU", DbType="NChar(10)")]
		public string BPU
		{
			get
			{
				return this._BPU;
			}
			set
			{
				if ((this._BPU != value))
				{
					this.OnBPUChanging(value);
					this.SendPropertyChanging();
					this._BPU = value;
					this.SendPropertyChanged("BPU");
					this.OnBPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BSU", DbType="NChar(10)")]
		public string BSU
		{
			get
			{
				return this._BSU;
			}
			set
			{
				if ((this._BSU != value))
				{
					this.OnBSUChanging(value);
					this.SendPropertyChanging();
					this._BSU = value;
					this.SendPropertyChanged("BSU");
					this.OnBSUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trade", DbType="NChar(10)")]
		public string Trade
		{
			get
			{
				return this._Trade;
			}
			set
			{
				if ((this._Trade != value))
				{
					this.OnTradeChanging(value);
					this.SendPropertyChanging();
					this._Trade = value;
					this.SendPropertyChanged("Trade");
					this.OnTradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capital", DbType="Real NOT NULL")]
		public float Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="BigInt")]
		public System.Nullable<long> DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeComment", DbType="NVarChar(MAX)")]
		public string TradeComment
		{
			get
			{
				return this._TradeComment;
			}
			set
			{
				if ((this._TradeComment != value))
				{
					this.OnTradeCommentChanging(value);
					this.SendPropertyChanging();
					this._TradeComment = value;
					this.SendPropertyChanged("TradeComment");
					this.OnTradeCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailSent", DbType="Char(10)")]
		public string MailSent
		{
			get
			{
				return this._MailSent;
			}
			set
			{
				if ((this._MailSent != value))
				{
					this.OnMailSentChanging(value);
					this.SendPropertyChanging();
					this._MailSent = value;
					this.SendPropertyChanged("MailSent");
					this.OnMailSentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
